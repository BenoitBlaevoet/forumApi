generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @unique @db.Uuid @default(uuid())
  username      String           @unique @db.VarChar(25)
  slug          String           @unique @db.VarChar(25)
  email         String           @unique @db.VarChar(255)
  password      String           @db.VarChar(255)
  banned        Boolean          @default(false)
  desactivated  Boolean          @default(false)
  threads       Thread[]
  Profile       Profile?
  Comments      Comment[]
  userRoleId    Int
  userRole      UserRole         @relation(fields: [userRoleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fromUser      PrivateMessage[] @relation(name: "fromUser_User")
  toUser        PrivateMessage[] @relation(name: "toUser_User")
  FavoriteForum FavoriteForum[]
  createdAt     DateTime         @default(now()) @db.Timestamp(6)
  updateAt      DateTime         @default(now()) @updatedAt() @db.Timestamp(6)
  RefreshToken  RefreshToken[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id           Int        @id @default(autoincrement())
  name         String     @unique @db.VarChar(25)
  slug         String     @unique @db.VarChar(25)
  User         User[]
  userRightsId Int
  userRights   UserRights @relation(fields: [userRightsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserRights {
  id                 Int        @id @default(autoincrement())
  createThread       Boolean    @default(true)
  readThread         Boolean    @default(true)
  deleteOwnThread    Boolean    @default(true)
  editOwnThread      Boolean    @default(true)
  editThread         Boolean    @default(false)
  deleteThread       Boolean    @default(false)
  commentThread      Boolean    @default(true)
  deleteOwnComment   Boolean    @default(true)
  deleteComment      Boolean    @default(false)
  sendPrivateMessage Boolean    @default(true)
  banUsers           Boolean    @default(false)
  userRole           UserRole[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(255)
  firstname String? @db.VarChar(255)
  bio       String?
  avatar    String?
  userId    String     @unique
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Forum {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  slug          String          @unique @db.VarChar(255)
  categoryId    Int
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Thread        Thread[]
  FavoriteForum FavoriteForum[]
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(6)
}


model Thread {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(255)
  slug       String     @unique @db.VarChar(255)
  content        String
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  forumId    Int
  Forum      Forum      @relation(fields: [forumId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Comments   Comment[]
}

model Comment {
  id             Int        @id @default(autoincrement())
  content        String
  createdAt      DateTime   @default(now()) @db.Timestamp(6)
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  threadId       Int
  userId         String
  quoteMessageId Int?
  thread         Thread     @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User           User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quoteMessage   Comment?  @relation(name: "QuoteMessage", fields: [quoteMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotedMessage  Comment[] @relation(name: "QuoteMessage")
}

model Category {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar(255)
  slug   String   @unique @db.VarChar(255)
  Thread Thread[]
  Forum  Forum[]
}

model PrivateMessage {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  toUserId   String
  toUser     User     @relation(name: "toUser_User", fields: [toUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fromUserId String
  fromUser   User     @relation(name: "fromUser_User", fields: [fromUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model FavoriteForum {
  id      Int   @id @default(autoincrement())
  userId  String
  forumId Int
  User    User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Forum   Forum @relation(fields: [forumId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}